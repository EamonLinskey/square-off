{"version":3,"sources":["services/SocketService.ts","gameContext.ts","services/GameService.ts","components/JoinRoom.tsx","components/Square.tsx","components/Board.tsx","components/ScoreboardList.tsx","components/Controls.tsx","components/Prompt.tsx","components/Game.tsx","components/Login.tsx","App.tsx","index.tsx"],"names":["socket","url","Promise","rs","rj","io","on","err","console","log","defaultState","isInRoom","setInRoom","isPlaying","setIsPlaying","prompt","setPrompt","user","setUser","React","createContext","roomId","alert","emit","firstName","photoUrl","error","options","listener","timeLeft","players_map","answer","position","scoreboard","JoinRoom","useState","roomName","setRoomName","isJoining","setJoining","useContext","gameContext","joinRoom","e","a","preventDefault","socketService","trim","gameService","joinGameRoom","catch","className","onSubmit","placeholder","value","onChange","target","id","type","disabled","Square","props","c","grade","setGrade","data-grade","onClick","toString","col","row","onSubmitAnswer","setTimeout","Board","players","setPlayers","boardRef","useRef","nums","perspective","reverse","useEffect","onMouseMove","prevState","copy","x","y","onPlayerJoin","requestCompletePlayerMap","ref","board","current","rect","getBoundingClientRect","clientX","left","width","clientY","top","height","sendMouseMove","map","r","renderRow","list","pid","player","push","style","src","renderRivals","ScoreboardList","setScoreboard","onScoreUpdate","onGameEnd","Object","values","sort","b","score","info","PlayerListItem","name","Controls","square","data-controls-hidden","data-display-none","gameDuration","min","max","step","setGameDuration","Number","checked","htmlFor","onStartClicked","Prompt","showing","setShowing","Game","setTimeLeft","onGameStart","onPromptUpdate","onTimeLeftUpdate","onGameWin","onGameLoss","submitAnswer","matchOptions","startGame","gd","googleLogin","window","open","Login","App","connectSocket","connect","axios","get","withCredentials","then","res","data","displayName","photos","Math","floor","random","gameContextValue","Provider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NA0Be,M,iDAtBNA,OAAwB,K,2CAE/B,SACEC,GACsD,IAAD,OACrD,OAAO,IAAIC,SAAQ,SAACC,EAAIC,GAGtB,GAFA,EAAKJ,OAASK,aAAGJ,IAEZ,EAAKD,OAAQ,OAAOI,IAEzB,EAAKJ,OAAOM,GAAG,WAAW,WACxBH,EAAG,EAAKH,WAGV,EAAKA,OAAOM,GAAG,iBAAiB,SAACC,GAC/BC,QAAQC,IAAI,qBAAsBF,GAClCH,EAAGG,a,MCNLG,EAAiC,CACrCC,UAAU,EACVC,UAAW,aACXC,WAAW,EACXC,aAAc,aACdC,OAAQ,KACRC,UAAW,aACXC,KAAM,KACNC,QAAS,cAGIC,MAAMC,cAAcV,GC+CpB,M,mIAjEb,WAA0BV,EAAgBqB,EAAgBJ,GAA1D,0FACS,IAAIf,SAAQ,SAACC,EAAIC,GACtBI,QAAQC,IAAI,QAASQ,GACrBK,MAAM,KACNtB,EAAOuB,KAAK,YAAa,CAAEF,SAASG,UAAW,QAASC,SAAU,QAClEzB,EAAOM,GAAG,eAAe,kBAAMH,GAAG,MAClCH,EAAOM,GAAG,mBAAmB,gBAAGoB,EAAH,EAAGA,MAAH,OAAetB,EAAGsB,UANnD,2C,yHAUA,WAAuB1B,EAAgB2B,GAAvC,iEACE3B,EAAOuB,KAAK,aAAcI,GAD5B,2C,8HAIA,WAA8B3B,EAAgB4B,GAA9C,iEACE5B,EAAOM,GAAG,aAAa,YAAiB,IAAfuB,EAAc,EAAdA,SAAgBD,EAASC,MADpD,2C,yHAIA,WAAyB7B,EAAgB4B,GAAzC,iEACE5B,EAAOM,GAAG,mBAAoBsB,GADhC,2C,0HAIA,WAA0B5B,EAAgB4B,GAA1C,iEACE5B,EAAOM,GAAG,qBAAqB,gBAAEwB,EAAF,EAAEA,YAAF,OAAmBF,EAASE,MAD7D,2C,sIAIA,WAAsC9B,EAAgB4B,GAAtD,iEACE5B,EAAOuB,KAAK,6BACZvB,EAAOM,GAAG,uBAAuB,gBAAEwB,EAAF,EAAEA,YAAF,OAAmBF,EAASE,MAF/D,2C,4HAKA,WAA4B9B,EAAgB4B,GAA5C,iEACE5B,EAAOM,GAAG,cAAc,gBAAES,EAAF,EAAEA,OAAF,OAAca,EAASb,MADjD,2C,0HAIA,WAA0Bf,EAAgB+B,GAA1C,iEACE/B,EAAOuB,KAAK,oBAAqB,CAACQ,WADpC,2C,2HAIA,WAA2B/B,EAAgBgC,GAA3C,iEACEhC,EAAOuB,KAAK,aAAc,CAACS,aAD7B,2C,yHAIA,WAAyBhC,EAAgB4B,GAAzC,iEACE5B,EAAOM,GAAG,4BAA4B,gBAAEwB,EAAF,EAAEA,YAAF,OAAmBF,EAASE,MADpE,2C,uHAIA,WAAuB9B,EAAgB4B,GAAvC,iEACE5B,EAAOM,GAAG,YAAY,kBAAMsB,OAD9B,2C,uHAIA,WAAuB5B,EAAgB4B,GAAvC,iEACE5B,EAAOM,GAAG,WAAW,kBAAMsB,OAD7B,2C,wHAIA,WAAwB5B,EAAgB4B,GAAxC,iEACE5B,EAAOM,GAAG,YAAY,kBAAMsB,OAD9B,2C,2HAIA,WAA2B5B,EAAgB4B,GAA3C,iEACE5B,EAAOM,GAAG,iBAAiB,gBAAE2B,EAAF,EAAEA,WAAF,OAAkBL,EAASK,MADxD,2C,wEC5DK,SAASC,IAAY,IAAD,EACOC,mBAAS,IADhB,mBAClBC,EADkB,KACRC,EADQ,OAEOF,oBAAS,GAFhB,mBAElBG,EAFkB,KAEPC,EAFO,OAIOC,qBAAWC,GAAnC7B,EAJiB,EAIjBA,UACFK,GALmB,EAINN,SACJ6B,qBAAWC,GAApBxB,MAOAyB,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACfD,EAAEE,iBAEI7C,EAAS8C,EAAc9C,OACxBoC,GAAgC,KAApBA,EAASW,QAAkB/C,EAJ7B,wDAMfuC,GAAW,GANI,SAQMS,EAClBC,aAAajD,EAAQoC,EAAUnB,GAC/BiC,OAAM,SAAC3C,GACNe,MAAMf,MAXK,eAcHK,GAAU,GAEtB2B,GAAW,GAhBI,4CAAH,sDAmBd,OACE,uBAAMY,UAAY,sBAAsBC,SAAYV,EAApD,UACE,oBAAIS,UAAY,gBAAhB,qBACA,6CACE,uBACEE,YAAY,UACZC,MAAOlB,EACPmB,SA/BqB,SAACZ,GAC5B,IAAMW,EAAQX,EAAEa,OAAOF,MACvBjB,EAAYiB,MA+BR,qBAAKG,GAAG,uBAAR,SACE,wBACEC,KAAO,SACPD,GAAK,QACLN,UAAY,oBACZQ,SAAYrB,EAJd,wB,YCtCV,SAASsB,EAAOC,GAAqB,IALbC,EAKY,EACR3B,mBAAgC,MADxB,mBAC3B4B,EAD2B,KACpBC,EADoB,KAE3BnD,EAAa2B,qBAAWC,GAAxB5B,UAEL,OACI,yBACIsC,UAAY,SACZc,aAAcF,EACdG,QAAW,WAAO,IAAD,EACb,GAAKrD,EAAL,CACA,IAAIkD,GAAwB,UAAAF,EAAM9C,cAAN,eAAcoD,cAAe,CAACN,EAAMO,IAAKP,EAAMQ,KAAKF,WAAa,UAAY,YACzGN,EAAMS,eAAe,CAACT,EAAMO,IAAKP,EAAMQ,MACvCL,EAASD,GACTQ,YAAW,WAAOP,EAAS,QAAQ,OAR3C,UAUI,qBAAKb,UAAY,YAAjB,SAA8BU,EAAMQ,MACpC,qBAAKlB,UAAY,YAAjB,UArBYW,EAqBiCD,EAAMO,IApB1C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACrCN,EAAE,SCgGLU,MA5FjB,SAAeX,GAAoB,IAAD,EAEY1B,mBAAS,CAAC,EAAG,IAFzB,gCAGAA,mBAAoB,KAHpB,mBAGvBsC,EAHuB,KAGdC,EAHc,OAIFlC,qBAAWC,GAAjC1B,EAJwB,EAIxBA,OAEA4D,GANwB,EAIhB3D,UAEG4D,iBAAuB,OAEpCC,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GA0EjC,MAzEyB,SAArBhB,EAAMiB,cACRD,EAAOA,EAAKE,WAkEdC,qBAAW,WA1BPhC,EAAYiC,YAAYnC,EAAc9C,QAAS,SAAC8B,GAC5C4C,GAAY,SAAAQ,GACR,IAAIC,EAAI,eAAOD,GACf,IAAK,IAAMzB,KAAM0B,EAAM,CAAC,IAAD,IACnBA,EAAK1B,GAAI2B,EAAT,UAAatD,EAAY2B,UAAzB,aAAa,EAAiB2B,EAC9BD,EAAK1B,GAAI4B,EAAT,UAAavD,EAAY2B,UAAzB,aAAa,EAAiB4B,EAElC,OAAOF,QA9BfnC,EAAYsC,aAAaxC,EAAc9C,QAAS,SAACyE,GAC7CC,EAAWD,MAKfzB,EAAYuC,yBAAyBzC,EAAc9C,QAAS,SAACyE,GACzDC,EAAWD,QA8ChB,IAGC,sBAAKhB,GAAK,QAAQ+B,IAAKb,EAAUM,YA7ChB,SAACtC,GAClB,IAAI8C,EAAQd,EAASe,QACrB,GAAKD,EAAL,CAEA,IAAIE,EAAOF,EAAMG,wBACbR,EAAI,KAAOzC,EAAEkD,QAAUF,EAAKG,MAAMH,EAAKI,MACvCV,EAAI,KAAO1C,EAAEqD,QAAUL,EAAKM,KAAKN,EAAKO,OAE1ClD,EAAYmD,cAAcrD,EAAc9C,OAAS,CAACoF,EAAGC,SANxC/D,MAAM,aA2CnB,UACKuD,EAAKuB,KAAI,SAAAC,GAAC,OAvEF,SAACA,GACd,IAAIxB,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAKjC,MAJyB,SAArBhB,EAAMiB,cACND,EAAOA,EAAKE,WAId,qBAAK5B,UAAY,MAAjB,SACG0B,EAAKuB,KAAI,SAAAtC,GAAC,OAAI,cAACF,EAAD,CAAQS,IAAOgC,EAAGjC,IAAON,EAAaQ,eAAkBT,EAAMS,eAAgBvD,OAAUA,GAArD+C,OADtBuC,GAgEbC,CAAUD,MAtBb,SAAC5B,GACjB,IAAI8B,EAA8B,GAClC,IAAK,IAAIC,KAAO/B,EACZ,GAAI+B,GAAO1D,EAAe9C,OAAQyD,GAAlC,CACA,IAAIgD,EAAShC,EAAQ+B,GACrBD,EAAKG,KACD,qBAAKjD,GAAG,QAAQkD,MAAS,CAACb,KAAK,QAAD,OAAUW,EAAOrB,EAAjB,aAA+Ba,IAAI,QAAD,OAAUQ,EAAOpB,EAAjB,cAAhE,SACI,qBAAKuB,IAAKH,EAAOhF,UAAY,qFAIzC,OAAO8E,EAaCM,CAAapC,OCxFtB,SAASqC,IAAkB,IAAD,EAEK3E,mBAAqB,IAF1B,mBAExBF,EAFwB,KAEZ8E,EAFY,KAsB7B,OALA/B,qBAAW,WAZPhC,EAAYgE,cAAclE,EAAc9C,QAAS,SAACiC,GAC9CzB,QAAQC,IAAIwB,GACZ8E,EAAc9E,MAKlBe,EAAYiE,UAAUnE,EAAc9C,QAAS,WACzCiC,EAAa,QAOlB,IAGC,qBAAKwB,GAAG,aAAR,SACI,6BAEQyD,OAAOC,OAAOlF,GAAYmF,MAAK,SAACxE,EAAGyE,GAAJ,OAAUA,EAAEC,MAAQ1E,EAAE0E,SAAOlB,KAAI,SAAAmB,GAC5D,OACI,cAACC,EAAD,CAAgBF,MAAOC,EAAKD,OAAS,EAAGG,KAAMF,EAAKE,KAAMhG,SAAY8F,EAAK9F,UAAiB8F,EAAK9D,WAS5H,SAAS+D,EAAe3D,GAEpB,OACI,oBAAIV,UAAU,mBAAd,SACI,sBAAKA,UAAU,gBAAf,UACI,sBAAKA,UAAU,WAAf,UACI,qBAAKyD,IAAK/C,EAAMpC,WAChB,sBAAK0B,UAAU,YAAf,UACI,qBAAKA,UAAY,WAAjB,SAA6BU,EAAM4D,OACnC,qBAAKtE,UAAY,cAAjB,2EAGR,qBAAKA,UAAU,kBAAf,SAAkCU,EAAMyD,aCUrCI,MAjDnB,SAAkB7D,GAAuB,IAZnB8D,EAYkB,EAERnF,qBAAWC,GAAjC1B,EAF8B,EAE9BA,OAEN,OAJoC,EAEtBC,UAGV,sBAAKmC,UAAU,UAAf,UACA,oBAAIM,GAAG,iBAAP,yBACA,sBAAKA,GAAG,kBAAkBmE,uBAAwB/D,EAAMhD,UAAxD,UACE,sBAAK4C,GAAG,sBAAsBoE,qBAAsBhE,EAAMhD,UAA1D,UACE,qBAAK4C,GAAG,QAAR,SAAiBI,EAAMhC,WACvB,sBAAK4B,GAAG,mBAAR,mBAtBUkE,EAsBoC5G,EArBjD4G,EAOY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAJ/BA,EAAO,GAKX,GALiBA,EAAO,GAF/B,OAqBF,cAACb,EAAD,OAEH,qBAAKe,oBAAqBhE,EAAMhD,eAGlC,qBAAK4C,GAAG,qBAAqBoE,oBAAqBhE,EAAMhD,UAAxD,SACE,sBAAK4C,GAAG,2BAAR,UACE,iDAAqBI,EAAMiE,gBAC3B,uBACEpE,KAAK,QACLqE,IAAI,KAAKC,IAAI,KACb7E,UAAU,SACVM,GAAG,UACHH,MAASO,EAAMiE,aACfG,KAAK,IACL1E,SAAY,SAACZ,GAAD,OAAOkB,EAAMqE,gBAAgBC,OAAOxF,EAAEa,OAAOF,WAG3D,+CACA,uBACEI,KAAK,WACL+D,KAAO,cACPW,SAAW,EACX3E,GAAG,gBAEL,uBAAO4E,QAAQ,cAAcR,oBAAqBhE,EAAMhD,UAAxD,2BACA,qBAAK4C,GAAG,uBAAR,SACE,wBACEA,GAAG,QACHN,UAAY,oBACZe,QAAW,kBAAML,EAAMyE,kBAHzB,+BCzBKC,MAhBnB,WAAmB,IAPGZ,EAOJ,EACcxF,oBAAS,GADvB,mBACTqG,EADS,KACAC,EADA,KAET1H,EAAUyB,qBAAWC,GAArB1B,OAOL,OALAiE,qBAAU,WACNyD,GAAW,GACXlE,YAAW,WAAOkE,GAAW,KAAS,OACvC,CAAC1H,IAGA,sBACI0C,GAAK,SACLN,UAAaqF,EAAU,UAAY,SAFvC,eAjBcb,EAoBE5G,EAnBf4G,EALY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAQ/BA,EAAO,GAPX,GAOiBA,EAAO,GAF/B,IAeP,QCfD,SAASe,IAAQ,IAAD,EAEWvG,mBAAS,GAFpB,mBAEdN,EAFc,KAEJ8G,EAFI,OAGenG,qBAAWC,GAAvC5B,EAHa,EAGbA,UAAWC,EAHE,EAGFA,aAHE,EAIS0B,qBAAWC,GAAzBzB,GAJK,EAIbD,OAJa,EAILC,WAJK,EAKmBmB,mBAAS,IAL5B,mBAKd2F,EALc,KAKAI,EALA,KAgDnB,OAPAlD,qBAAU,WAbRhC,EAAY4F,YAAY9F,EAAc9C,QAAS,kBAAMc,GAAa,MAZ7DgC,EAAc9C,QACnBgD,EAAY6F,eAAe/F,EAAc9C,QAAQ,SAACe,GAChDC,EAAUD,MAVN+B,EAAc9C,QACdgD,EAAY8F,iBAAiBhG,EAAc9C,QAAQ,SAAC6B,GAClD8G,EAAY9G,MAsBpBmB,EAAYiE,UAAUnE,EAAc9C,QAAS,WAAOc,GAAa,MACjEkC,EAAY+F,UAAUjG,EAAc9C,QAAS,kBAAMsB,MAAM,cACzD0B,EAAYgG,WAAWlG,EAAc9C,QAAS,kBAAMsB,MAAM,iBAYzD,IAGC,sBAAKmC,GAAK,YAAV,UACI,qBAAKA,GAAG,iBAAR,SACI,sBAAKA,GAAG,OAAR,UACI,cAAC,EAAD,CAAOa,eAfH,SAACR,GACnBd,EAAYiG,aAAanG,EAAc9C,OAAS,CAAC8D,EAAE,GAAIA,EAAE,MAcJgB,YAAc,UACrD,cAAC,EAAD,SAGR,cAAC,EAAD,CACEjD,SAAYA,EACZhB,UAAaA,EACbyH,eAAkB,kBArCX,WACf,IAAMY,EAA6B,CAACpB,eAAchD,YAAa,SAC/D9B,EAAYmG,UAAUrG,EAAc9C,OAASkJ,GAmCbC,IACxBrB,aAAgBA,EAChBI,gBAAmB,SAACkB,GAAD,OAAQlB,EAAgBkB,SCvEzD,IAEMC,EAAa,WACfC,OAAOC,KAAK,wDAAyD,UAGlE,SAASC,IACZ,OACI,sBAAKrG,UAAY,sBAAjB,UACI,oBAAIA,UAAY,gBAAhB,qBACA,wCACA,qBAAKM,GAAG,uBAAR,SACI,wBACAA,GAAK,QACLN,UAAY,oBACZe,QAASmF,EAHT,sC,oCCoDDI,MApDf,WAAgB,IAAD,EACiBtH,oBAAS,GAD1B,mBACNxB,EADM,KACIC,EADJ,OAE2BuB,oBAAS,GAFpC,gCAGqBA,oBAAS,IAH9B,mBAGNtB,EAHM,KAGKC,EAHL,OAIeqB,mBAAkC,MAJjD,mBAINpB,EAJM,KAIEC,EAJF,OAKWmB,mBAAsB,MALjC,mBAKNlB,EALM,KAKAC,EALA,KAOPwI,EAAa,uCAAG,sBAAA9G,EAAA,sEACCE,EAClB6G,QAAQ,4CACRzG,OAAM,SAAC3C,GACNC,QAAQC,IAAI,UAAWF,MAJP,yDAAH,qDAQnByE,qBAAU,WACR0E,IACAE,IAAMC,IAAI,mDAAoD,CAACC,iBAAiB,IAAOC,MAAK,SAACC,GAC3F,GAAIA,EAAIC,KAAM,CACZ3I,MAAM,sBACN,IAAIL,EAAa,CAACO,UAAWwI,EAAIC,KAAKC,YAAazI,SAAUuI,EAAIC,KAAKE,OAAO,GAAG7G,MAAOG,GAAI2G,KAAKC,MAAsB,IAAhBD,KAAKE,UAAgBnG,YAC3HjD,EAAQD,OAETiC,OAAM,SAAC3C,GAAD,OAASC,QAAQC,IAAIF,QAC7B,IAEH,IAAMgK,EAAqC,CACzC5J,WACAC,YACAC,YACAC,eACAC,SACAC,YACAC,OACAC,WAGF,OACE,cAAC,EAAYsJ,SAAb,CAAsBlH,MAAOiH,EAA7B,SACE,qBAAKpH,UAAU,MAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOsH,KAAK,UAAUC,QAAW,cAAClB,EAAD,MACjC,cAAC,IAAD,CAAOiB,KAAK,SAASC,QAAU,sCAAI/J,GAAY,cAACuB,EAAD,IAAhB,IAA+BvB,GAAY,cAAC+H,EAAD,mBCnDtFiC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.1be1600b.chunk.js","sourcesContent":["import { io, Socket } from \"socket.io-client\";\nimport { DefaultEventsMap } from \"socket.io-client/build/typed-events\";\n\nclass SocketService {\n  public socket: Socket | null = null;\n\n  public connect(\n    url: string\n  ): Promise<Socket<DefaultEventsMap, DefaultEventsMap>> {\n    return new Promise((rs, rj) => {\n      this.socket = io(url);\n\n      if (!this.socket) return rj();\n\n      this.socket.on(\"connect\", () => {\n        rs(this.socket as Socket);\n      });\n\n      this.socket.on(\"connect_error\", (err) => {\n        console.log(\"Connection error: \", err);\n        rj(err);\n      });\n    });\n  }\n}\n\nexport default new SocketService();\n","import React from \"react\";\nimport { PlayerMap, User } from \"./types\"\n\nexport interface GameContextProps {\n  isInRoom: boolean;\n  setInRoom: (inRoom: boolean) => void;\n  isPlaying: boolean;\n  setIsPlaying: (started: boolean) => void\n  prompt: [number, number] | null\n  setPrompt: (prompt: [number, number] | null) => void\n  user: User | null\n  setUser: (user: User) => void\n}\n\nconst defaultState: GameContextProps = {\n  isInRoom: false,\n  setInRoom: () => {},\n  isPlaying: false,\n  setIsPlaying: () => {},\n  prompt: null,\n  setPrompt: () => {},\n  user: null,\n  setUser: () => {}\n};\n\nexport default React.createContext(defaultState);\n","import { SocketConnectOpts } from \"net\";\nimport { Socket } from \"socket.io-client\";\nimport { MatchOptions, Player, Scoreboard } from \"../types\"\nimport SocketService from \"./SocketService\";\nimport { User, PlayerMap } from \"../types\"\n\nclass GameService {\n  public async joinGameRoom(socket: Socket, roomId: string, user: User): Promise<boolean> {\n    return new Promise((rs, rj) => {\n      console.log(\"user:\", user)\n      alert(\"a\")\n      socket.emit(\"join_game\", { roomId , firstName: \"jimmy\", photoUrl: \"afd\" });\n      socket.on(\"room_joined\", () => rs(true));\n      socket.on(\"room_join_error\", ({ error }) => rj(error));\n    });\n  }\n  \n  public async startGame(socket: Socket, options: MatchOptions) {\n    socket.emit(\"start_game\", options)\n  }\n  \n  public async onTimeLeftUpdate(socket: Socket, listener: (timeLeft: number) => void) {\n    socket.on(\"time_left\", ({timeLeft}) => { listener(timeLeft) })\n  }\n  \n  public async onGameStart(socket: Socket, listener: () => void) {\n    socket.on(\"game_has_started\", listener)\n  }\n  \n  public async onPlayerJoin(socket: Socket, listener: (players: PlayerMap) => void) {\n    socket.on(\"player_has_joined\", ({players_map}) => listener(players_map))\n  }\n\n  public async requestCompletePlayerMap(socket: Socket, listener: (players: PlayerMap) => void) {\n    socket.emit(\"needs_complete_player_map\")\n    socket.on(\"complete_player_map\", ({players_map}) => listener(players_map))\n  }\n  \n  public async onPromptUpdate(socket: Socket, listener: (prompt: [number, number]) => void) {\n    socket.on(\"new_prompt\", ({prompt}) => listener(prompt))\n  }\n  \n  public async submitAnswer(socket: Socket, answer: [number, number]) {\n    socket.emit(\"answer_submission\", {answer})\n  }\n  \n  public async sendMouseMove(socket: Socket, position: [number, number]) {\n    socket.emit(\"mouse_move\", {position})\n  }\n  \n  public async onMouseMove(socket: Socket, listener: (players: PlayerMap) => void) {\n    socket.on(\"updated_player_positions\", ({players_map}) => listener(players_map))\n  }\n  \n  public async onGameEnd(socket: Socket, listener: () => void) {\n    socket.on(\"game_end\", () => listener())\n  }\n\n  public async onGameWin(socket: Socket, listener: ()=> void) {\n    socket.on(\"you won\", () => listener())\n  }\n\n  public async onGameLoss(socket: Socket, listener: ()=> void) {\n    socket.on(\"you lost\", () => listener())\n  }\n  \n  public async onScoreUpdate(socket: Socket, listener: (scoreboard: any) => void) {\n    socket.on(\"updated_score\", ({scoreboard}) => listener(scoreboard))\n  }\n  \n}\n\nexport default new GameService();\n","import React, { useContext, useState } from \"react\";\nimport gameContext from \"../gameContext\";\nimport gameService from \"../services/GameService\";\nimport socketService from \"../services/SocketService\";\n\n\nexport function JoinRoom() {\n  const [roomName, setRoomName] = useState(\"\");\n  const [isJoining, setJoining] = useState(false);\n\n  const { setInRoom, isInRoom } = useContext(gameContext);\n  var { user } = useContext(gameContext)\n\n  const handleRoomNameChange = (e: React.ChangeEvent<any>) => {\n    const value = e.target.value;\n    setRoomName(value);\n  };\n\n  const joinRoom = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const socket = socketService.socket;\n    if (!roomName || roomName.trim() === \"\" || !socket) return;\n\n    setJoining(true);\n\n    const joined = await gameService\n      .joinGameRoom(socket, roomName, user!)\n      .catch((err) => {\n        alert(err);\n      });\n\n    if (joined) setInRoom(true);\n\n    setJoining(false);\n  };\n\n  return (\n    <form className = \"login account-panel\" onSubmit = {joinRoom}>\n      <h1 className = \"banner-header\">Welcome</h1>\n      <h2>Join a room</h2>\n        <input \n          placeholder=\"Room ID\"\n          value={roomName}\n          onChange={handleRoomNameChange}\n        />\n        <div id=\"button-background-3d\">\n          <button \n            type = \"submit\"\n            id = \"login\"\n            className = \"fun-orange-button\"\n            disabled = {isJoining}\n          >Join!</button>\n        </div>\n      </form>\n  );\n}","import {useContext, useState} from \"react\"\nimport {SquareProps, SelectionGrade } from \"../types\"\nimport gameContext from \"../gameContext\"\n\nfunction numberToLetter(c: number): string {\n    const colNames = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n    return colNames[c-1]\n}\n\nfunction Square(props: SquareProps) {\n    let [grade, setGrade] = useState<SelectionGrade | null>(null)\n    let {isPlaying} = useContext(gameContext)\n\n    return (\n        <button \n            className = \"square\" \n            data-grade = {grade} \n            onClick = {() => {\n                if (!isPlaying) { return }\n                let grade: SelectionGrade = props.prompt?.toString() === [props.col, props.row].toString() ? \"correct\" : \"incorrect\"\n                props.onSubmitAnswer([props.col, props.row]);\n                setGrade(grade)\n                setTimeout(() => {setGrade(null)}, 250)\n            }}>\n            <div className = \"row-label\">{props.row}</div>\n            <div className = \"col-label\">{numberToLetter(props.col)}</div>\n        </button>\n    )\n}\n\nexport { Square }","import { BoardProps, PlayerMap } from \"../types\"\nimport { Square } from \"./Square\"\nimport socketService from \"../services/SocketService\";\nimport gameService from \"../services/GameService\";\nimport { useEffect, useState, useContext, useRef, MouseEvent } from \"react\";\nimport { Player } from \"../types\"\nimport React from \"react\";\nimport gameContext from \"../gameContext\";\n\n\nfunction Board(props: BoardProps) {\n\n    let [cursorPosition, setCursorPosition] = useState([0, 0])\n    const [players, setPlayers] = useState<PlayerMap>({})\n    var { prompt, setPrompt } = useContext(gameContext)\n\n    const boardRef = useRef<HTMLDivElement>(null)\n\n    var nums = [1, 2, 3, 4, 5, 6, 7, 8]\n    if (props.perspective == \"white\") {\n      nums = nums.reverse()\n    }\n\n    const renderRow =(r: number)=> { \n        var nums = [1, 2, 3, 4, 5, 6, 7, 8]   \n        if (props.perspective == \"black\") {\n            nums = nums.reverse()\n        }\n\n        return (\n          <div className = \"row\" key = {r} >\n            {nums.map(c => <Square row = {r} col = {c} key = {c} onSubmitAnswer = {props.onSubmitAnswer} prompt = {prompt} />)}\n          </div>\n        )\n    }\n\n    const handlePlayerJoins =()=> {\n        gameService.onPlayerJoin(socketService.socket!, (players) => {\n            setPlayers(players)\n        })\n    }\n\n    const getPlayersOnInitialJoin =()=> {\n        gameService.requestCompletePlayerMap(socketService.socket!, (players) => {\n            setPlayers(players)\n        })\n    }\n\n    const sendMouseMove =(e: MouseEvent)=> {\n        var board = boardRef.current\n        if (!board) {alert(\"no board\"); return}\n\n        var rect = board.getBoundingClientRect()\n        var x = 100 * (e.clientX - rect.left)/rect.width\n        var y = 100 * (e.clientY - rect.top)/rect.height\n\n        gameService.sendMouseMove(socketService.socket!, [x, y])\n    }\n\n    const handleMouseMove =()=> {\n        gameService.onMouseMove(socketService.socket!, (players_map) => {\n            setPlayers( prevState => {\n                let copy = {...prevState}\n                for (const id in copy) {\n                    copy[id].x = players_map[id]?.x\n                    copy[id].y = players_map[id]?.y\n                }\n                return copy\n            })\n        })\n    }\n\n    const renderRivals =(players: PlayerMap)=> {\n        var list: React.ReactFragment[] = []\n        for (var pid in players) {\n            if (pid == socketService!.socket!.id) { continue }\n            let player = players[pid]\n            list.push(\n                <div id=\"rival\" style = {{left: `calc(${player.x}% - 35px)`, top: `calc(${player.y}% - 35px)`}}>\n                    <img src={player.photoUrl || \"https://pbs.twimg.com/profile_images/1354861288690749448/FztA7cjH_400x400.jpg\"} />\n                </div>\n            )\n        }\n        return list\n    }\n\n    useEffect( () => {\n        handleMouseMove()\n        handlePlayerJoins()\n        getPlayersOnInitialJoin()\n    }, [])\n\n    return (\n        <div id = \"board\" ref={boardRef} onMouseMove={sendMouseMove}>\n            {nums.map(r => renderRow(r))}\n            {\n                renderRivals(players)\n            }\n        </div>\n    ) \n}\n\n  export default Board","import { useEffect, useState, forwardRef } from \"react\"\nimport gameService from \"../services/GameService\";\nimport socketService from \"../services/SocketService\";\nimport { Scoreboard, ScoreInfo } from \"../types\";\nimport FlipMove from \"react-flip-move\";\n\nconst dummyImage = \"https://images.squarespace-cdn.com/content/v1/581ccadb414fb5bef66c2bcb/1615306891656-XO04TW6U3PGMNHE24M7D/Lawrence_Trent_%28ENG%292.jpg?format=500w\"\n\nexport function ScoreboardList() {\n\n    var [scoreboard, setScoreboard] = useState<Scoreboard>({})\n\n    const handleScoreUpdate =()=> {\n        gameService.onScoreUpdate(socketService.socket!, (scoreboard) => {\n            console.log(scoreboard)\n            setScoreboard(scoreboard)\n        })\n    }\n\n    const handleGameEnd =()=> {\n        gameService.onGameEnd(socketService.socket!, () => {\n            scoreboard = {}\n        })\n    }\n\n    useEffect( () => {\n        handleScoreUpdate()\n        handleGameEnd()\n    }, [])\n\n    return (\n        <div id=\"scoreboard\">\n            <ol>\n                {\n                    Object.values(scoreboard).sort((a, b) => b.score - a.score).map(info => {\n                        return(\n                            <PlayerListItem score={info.score || 0} name={info.name} photoUrl = {info.photoUrl} key = {info.id} />\n                        )\n                    })\n                }\n            </ol>\n        </div>\n    )\n}\n\nfunction PlayerListItem(props: ScoreInfo) {\n\n    return (\n        <li className=\"player-list-item\">\n            <div className=\"pli-container\">\n                <div className=\"pli-left\">\n                    <img src={props.photoUrl} />\n                    <div className=\"pli-stack\">  \n                        <div className = \"pli-name\">{props.name}</div>\n                        <div className = \"pli-history\">✅ ❌ ✅ ✅ ❌ ❌ ✅ ❌</div>\n                    </div>\n                </div>\n                <div className=\"pli-right score\">{props.score}</div>\n            </div>\n        </li>\n    )\n}","import { useContext } from \"react\"\nimport gameContext from \"../gameContext\"\nimport { ControlsProps } from \"../types\"\nimport { ScoreboardList } from \"./ScoreboardList\"\n\n\nfunction squareToName(square: [number, number] | null): string {\n    if (!square) {\n        return \"\"\n    }\n    return numberToLetter(square[0]) + square[1]\n}\n\nfunction numberToLetter(c: number): string {\n    const colNames = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n    return colNames[c-1]\n}\n\nfunction Controls(props: ControlsProps) {\n    \n    var { prompt, setPrompt } = useContext(gameContext)\n\n    return (\n        <div className='sidebar'>\n        <h1 id=\"sidebar-header\">Square Off!</h1>\n        <div id=\"sidebar-content\" data-controls-hidden = {props.isPlaying}>\n          <div id=\"game-fact-container\" data-display-none = {!props.isPlaying}>\n            <div id=\"timer\">{props.timeLeft}</div>\n            <div id=\"task-description\">Find {squareToName(prompt)}</div>\n            {<ScoreboardList />}\n          </div>\n          <div data-display-none = {props.isPlaying} > \n          </div>\n        </div>\n        <div id=\"controls-container\" data-display-none = {props.isPlaying}>\n          <div id=\"controls-inner-container\">\n            <div >Round Length: {props.gameDuration}</div>\n            <input \n              type=\"range\"\n              min=\"10\" max=\"60\"\n              className=\"slider\"\n              id=\"myRange\"\n              value = {props.gameDuration} \n              step=\"5\"\n              onChange = {(e) => props.setGameDuration(Number(e.target.value))}\n            />\n\n            <div>Perspective:</div>\n            <input \n              type=\"checkbox\"\n              name = \"perspective\"\n              checked = {true}\n              id=\"perspective\"\n            />\n            <label htmlFor=\"perspective\" data-display-none = {props.isPlaying}>View as black</label>\n            <div id=\"button-background-3d\">\n              <button \n                id=\"start\"\n                className = \"fun-orange-button\"\n                onClick = {() => props.onStartClicked()}\n              >Start!</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n}\n    export default Controls","import { useContext, useEffect, useState } from \"react\"\nimport gameContext from \"../gameContext\"\n\nfunction numberToLetter(c: number): string {\n    const colNames = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n    return colNames[c-1]\n}\n\nfunction squareToName(square: [number, number] | null): string {\n    if (!square) {\n        return \"\"\n    }\n    return numberToLetter(square[0]) + square[1]\n}\n\nfunction Prompt() {\n    let [showing, setShowing] = useState(true)\n    let {prompt} = useContext(gameContext)\n\n    useEffect(() => {\n        setShowing(true)\n        setTimeout(() => {setShowing(false)}, 300)\n    }, [prompt])\n\n    return (\n        <div \n            id = \"prompt\" \n            className = {showing ? \"showing\" : \"hiding\"}\n        > {squareToName(prompt)} </div>\n    )\n}\n    export default Prompt","import { useContext, useEffect, useState } from \"react\";\nimport gameService from \"../services/GameService\";\nimport socketService from \"../services/SocketService\"\nimport Board from \"./Board\"\nimport Controls from \"./Controls\"\nimport Prompt from \"./Prompt\";\nimport { MatchOptions, Player } from \"../types\";\nimport gameContext from \"../gameContext\";\n\n\nexport function Game() {\n\n    var [timeLeft, setTimeLeft] = useState(0)\n    var { isPlaying, setIsPlaying } = useContext(gameContext)\n    var { prompt, setPrompt } = useContext(gameContext)\n    var [gameDuration, setGameDuration] = useState(30)\n\n    const handleTimeLeftUpdate =()=> {\n        if (socketService.socket) {\n            gameService.onTimeLeftUpdate(socketService.socket, (timeLeft) => {\n              setTimeLeft(timeLeft)\n            })\n        }\n    }\n\n    const handlePromptUpdate =()=> {\n      if (!socketService.socket) { return }\n      gameService.onPromptUpdate(socketService.socket, (prompt) => {\n        setPrompt(prompt)\n      })\n    }\n\n    const startGame =()=> {\n      const matchOptions: MatchOptions = {gameDuration, perspective: \"white\"}\n      gameService.startGame(socketService.socket!, matchOptions)\n    }\n\n    const handleGameStart =()=> {\n      gameService.onGameStart(socketService.socket!, () => setIsPlaying(true))\n    }\n\n    const handleGameEnd =()=> {\n      gameService.onGameEnd(socketService.socket!, () => {setIsPlaying(false);})\n      gameService.onGameWin(socketService.socket!, () => alert(\"you won\"))\n      gameService.onGameLoss(socketService.socket!, () => alert(\"you lost\"))\n    }\n    \n    const submitAnswer =(c: [number, number])=> {\n      gameService.submitAnswer(socketService.socket!, [c[0], c[1]])\n    }\n\n    useEffect(() => {\n        handleGameStart()\n        handlePromptUpdate()\n        handleTimeLeftUpdate()\n        handleGameEnd()\n    }, [])\n\n    return (\n        <div id = \"container\">\n            <div id=\"game-container\">\n                <div id=\"game\">\n                    <Board onSubmitAnswer = {submitAnswer} perspective = \"white\" />\n                    <Prompt />\n                </div>\n            </div>\n            <Controls \n              timeLeft = {timeLeft}\n              isPlaying = {isPlaying}\n              onStartClicked = {() => startGame()} \n              gameDuration = {gameDuration}\n              setGameDuration = {(gd) => setGameDuration(gd)}\n            />\n        </div>\n    )\n}","const GITHUB_CLIENT_ID = \"e9b18091102d7058d0c3\"\n\nconst googleLogin =()=> {\n    window.open(\"https://square-off-backend.herokuapp.com/auth/google/\", \"_self\")\n}\n\nexport function Login() {\n    return (\n        <div className = \"login account-panel\">\n            <h1 className = \"banner-header\">Welcome</h1>\n            <h2>Log In</h2>\n            <div id=\"button-background-3d\">\n                <button \n                id = \"login\"\n                className = \"fun-orange-button\"\n                onClick={googleLogin}\n                >\n                    Log In with Google!\n                </button>\n            </div>\n        </div>\n    )\n}","import { useEffect, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport socketService from \"./services/SocketService\";\nimport { JoinRoom } from \"./components/JoinRoom\";\nimport GameContext, { GameContextProps } from \"./gameContext\";\nimport { Game } from \"./components/Game\"\nimport { Login } from \"./components/Login\"\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Player, User, PlayerMap } from \"./types\"\nimport axios from \"axios\"\nimport gameService from \"./services/GameService\";\n\nfunction App() {\n  const [isInRoom, setInRoom] = useState(false);\n  const [isGameStarted, setGameStarted] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [prompt, setPrompt] = useState<[number, number] | null>(null)\n  const [user, setUser] = useState<User | null>(null)\n\n  const connectSocket = async () => {\n    const socket = await socketService\n      .connect(\"https://square-off-backend.herokuapp.com\")\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  };\n\n  useEffect(() => {\n    connectSocket();\n    axios.get(\"https://square-off-backend.herokuapp.com/getuser\", {withCredentials: true}).then((res) => {\n      if (res.data) {\n        alert(\"successful getuser\")\n        let user: User = {firstName: res.data.displayName, photoUrl: res.data.photos[0].value, id: Math.floor(Math.random() * 200).toString()}\n        setUser(user)\n      }\n    }).catch((err) => console.log(err))\n  }, []);\n\n  const gameContextValue: GameContextProps = {\n    isInRoom,\n    setInRoom,\n    isPlaying,\n    setIsPlaying,\n    prompt,\n    setPrompt,\n    user,\n    setUser\n  };\n\n  return (\n    <GameContext.Provider value={gameContextValue as GameContextProps}>\n      <div className=\"App\">\n        <Router>\n          <Routes>\n            <Route path=\"/login/\" element = {<Login />} />\n            <Route path=\"/play/\" element ={<>{!isInRoom && <JoinRoom />} {isInRoom && <Game />}</>}/>\n          </Routes>\n        </Router>\n      </div>\n    </GameContext.Provider>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}